name: Build and Push Custom Caddy Image

# 定义工作流的触发条件
on:
  # 允许在 GitHub Actions 页面手动触发此工作流
  workflow_dispatch:
  
  # 当有代码推送到 'main' 分支时触发
  push:
    branches:
      - 'main'
    # 仅当 Dockerfile 或此工作流文件本身发生变化时才运行
    paths:
      - 'Dockerfile'
      - '.github/workflows/build-caddy-image.yml'

  schedule:
    - cron: '0 2 * * 5'

jobs:
  build-and-push:
    # 使用最新的 Ubuntu 虚拟机运行任务
    runs-on: ubuntu-latest
    
    # 授予工作流写入 GitHub Packages (GHCR) 的权限
    permissions:
      contents: read
      packages: write

    steps:
      # 第1步：检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第2步：登录到 GitHub Container Registry (GHCR)
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # github.actor 是触发工作流的用户名
          username: ${{ github.actor }}
          # GITHUB_TOKEN 是由 GitHub Actions 自动生成的、具有适当权限的临时令牌
          password: ${{ secrets.GITHUB_TOKEN }}

      # 第3步：提取 Docker 元数据
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch

      # 第4步：构建并推送镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # context: . 表示 Dockerfile 位于仓库根目录
          context: .
          # push: true 表示构建成功后将镜像推送到仓库
          push: true
          # 使用上一步生成的元数据作为镜像的标签
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
